// Test generated by RoostGPT for test test2 using AI Type Open AI and AI Model gpt-4

package com.company.internationalizationtaticfilesandresources.service.impl;

import com.company.internationalizationtaticfilesandresources.exception.DownloadFailedException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class IFileStorageService_download_457aa7bf03_Test {

    @Mock
    private FileStorageService fileStorageService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testDownloadSuccess() throws MalformedURLException {
        String fileName = "testFile.txt";
        Path path = Paths.get(fileName);
        Resource resource = new UrlResource(path.toUri());

        when(fileStorageService.download(fileName)).thenReturn(resource);

        Resource returned = fileStorageService.download(fileName);

        assertNotNull(returned);
        assertEquals(resource, returned);
    }

    @Test
    public void testDownloadFailure() {
        String fileName = "nonExistentFile.txt";

        when(fileStorageService.download(fileName)).thenThrow(DownloadFailedException.class);

        assertThrows(DownloadFailedException.class, () -> fileStorageService.download(fileName));
    }

    @Test
    public void testDownloadIOException() throws IOException {
        String fileName = "ioExceptionFile.txt";

        when(fileStorageService.download(fileName)).thenThrow(IOException.class);

        assertThrows(DownloadFailedException.class, () -> fileStorageService.download(fileName));
    }
}
