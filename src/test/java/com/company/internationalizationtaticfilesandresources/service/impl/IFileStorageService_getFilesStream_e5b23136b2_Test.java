// Test generated by RoostGPT for test test2 using AI Type Open AI and AI Model gpt-4

package com.company.internationalizationtaticfilesandresources.service.impl;

import com.company.internationalizationtaticfilesandresources.enums.ExceptionEnum;
import com.company.internationalizationtaticfilesandresources.exception.NotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class IFileStorageService_getFilesStream_e5b23136b2_Test {

    @Mock
    private Logger log;

    @InjectMocks
    private FileStorageService fileStorageService;

    private final Path ROOT = Paths.get("./src/test/resources");

    @BeforeEach
    public void setUp() {
        fileStorageService = new FileStorageService();
        fileStorageService.setROOT(ROOT);
    }

    @Test
    public void testGetFilesStream_success() {
        Stream<Path> expected = Stream.of(Paths.get("./src/test/resources/test.txt"));
        Stream<Path> actual = fileStorageService.getFilesStream();

        assertArrayEquals(expected.toArray(), actual.toArray());
        verify(log, times(1)).info("file: {}", actual);
    }

    @Test
    public void testGetFilesStream_notFound() {
        when(fileStorageService.getFilesStream()).thenReturn(Stream.empty());

        Exception exception = assertThrows(NotFoundException.class, () -> fileStorageService.getFilesStream());

        verify(log, times(1)).error(ExceptionEnum.NOT_FOUND_FILE.name());
        assertEquals("File not found", exception.getMessage());
    }

    @Test
    public void testGetFilesStream_ioException() {
        try {
            doThrow(new IOException()).when(Files.walk(ROOT)).filter(Files::isRegularFile);
        } catch (IOException e) {
            e.printStackTrace();
        }

        assertThrows(RuntimeException.class, () -> fileStorageService.getFilesStream());
    }
}
