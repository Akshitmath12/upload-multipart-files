// Test generated by RoostGPT for test test2 using AI Type Open AI and AI Model gpt-4

package com.company.internationalizationtaticfilesandresources.controller;

import com.company.internationalizationtaticfilesandresources.service.FileStorageService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;

import java.nio.file.Path;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class FileController_getFile_7a9b8d2dbd_Test {

    @InjectMocks
    private FileController fileController;

    @Mock
    private FileStorageService fileStorageService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        ReflectionTestUtils.setField(fileController, "fileStorageService", fileStorageService);
    }

    @Test
    public void testGetFile_success() {
        Stream<Path> expectedFilesStream = Stream.of(Path.of("/test1"), Path.of("/test2"));
        when(fileStorageService.getFilesStream()).thenReturn(expectedFilesStream);

        ResponseEntity<Stream<Path>> response = fileController.getFile();

        assertEquals(ResponseEntity.ok(expectedFilesStream), response);
    }

    @Test
    public void testGetFile_noFiles() {
        Stream<Path> expectedFilesStream = Stream.empty();
        when(fileStorageService.getFilesStream()).thenReturn(expectedFilesStream);

        ResponseEntity<Stream<Path>> response = fileController.getFile();

        assertEquals(ResponseEntity.ok(expectedFilesStream), response);
    }
}
