// Test generated by RoostGPT for test test2 using AI Type Open AI and AI Model gpt-4

package com.company.internationalizationtaticfilesandresources.controller;

import com.company.internationalizationtaticfilesandresources.dto.ResponseMessage;
import com.company.internationalizationtaticfilesandresources.service.FileStorageService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

public class FileController_download_b49d51fe3a_Test {

    @InjectMocks
    FileController fileController;

    @Mock
    FileStorageService fileStorageService;

    @Mock
    Resource resource;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testDownloadSuccess() {
        String fileName = "testFile.txt";
        when(fileStorageService.download(fileName)).thenReturn(resource);
        when(resource.getFilename()).thenReturn(fileName);
        ResponseEntity<Resource> response = fileController.download(fileName);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(MediaType.MULTIPART_FORM_DATA, response.getHeaders().getContentType());
        assertEquals("attachment: fileName =\""+fileName+"\"", response.getHeaders().get(HttpHeaders.CONTENT_DISPOSITION).get(0));
    }

    @Test
    public void testDownloadFailure() {
        String fileName = "nonExistentFile.txt";
        when(fileStorageService.download(fileName)).thenReturn(null);
        try {
            ResponseEntity<Resource> response = fileController.download(fileName);
        } catch (Exception e) {
            assertNotNull(e);
        }
    }
}
